} else{
return ('Not Equal Length')
}
}
word = 'EPS568'
worde = 'asasas'
compare(word, worde)
rep(c(4, 5, 6, 7, 8, 9, 10), c(3, 4, 5, 6, 5, 4, 3))
luck = function() {
x <- sum(sample(x = 1:6, size = 2, replace = TRUE))
y <- rep(c(4, 5, 6, 7, 8, 9, 10), c(3, 4, 5, 6, 5, 4, 3))
return(ifelse(x %in% c(7, 11), "Win", ifelse(x %in% c(2, 3, 12), "Lose", ifelse(sample(y) == 7, "Lose", "Win"))))
}
trial = c()
trial
luck = function() {
x <- sum(sample(x = 1:6, size = 2, replace = TRUE))
y <- rep(c(4, 5, 6, 7, 8, 9, 10), c(3, 4, 5, 6, 5, 4, 3))
return(ifelse(x %in% c(7, 11), "Win", ifelse(x %in% c(2, 3, 12), "Lose", ifelse(sample(y) == 7, "Lose", "Win"))))
}
trial = c()
for (i in 1:1000) {
trial[i] = luck()
}
trial
trial=='Win'
sum(trial=='Win')
sum(v=='Win')
v <- rep(NA, 1000)
# Craps Function
craps <- function() {
losses = c(2,3,12)
wins = c(7,11)
initialRoll <- sum(sample(1:6, 2, replace=T))
if (initialRoll %in% losses)
result = 'Loss'
else if (initialRoll %in% wins)
result = 'Win'
else {
point <- initialRoll
# While Loop until point | 7
roll <- 0
while(roll!= point && roll!=7) {
roll <- sum(sample(1:6, 2, replace=T))
}
if (roll == point)
result = 'Win'
else if (roll == 7)
result = 'Loss'
}
return(result)
}
# for loop iterating 1000 times
for (i in 1:length(v)){
v[i] = craps()
}
print(v)
sum(v=='Win')
sum(trial=='Win')
set.seed(0)
sum(trial=='Win')
sum(v=='Win')
sum(v=='Win')/length(v)
sum(trial=='Win')/length(trial)
print(sum(trial=='Win')/length(trial))
print(sum(v=='Win')/length(v))
get_url <- function(year, quarter){
url = paste0(
"https://projects.propublica.org/congress/assets/staffers/",
year, quarter,
"-house-disburse-detail.csv"
)
return(url)
}
load_file_get_fname <- function(year, quarter){
url = get_url(year, quarter)
result = tryCatch(
{
print(paste0("Downloading for ", year, " ", quarter))
read.csv(url)
},
error = function(e) {
print(paste0("The url might not exist, no data for ", year, quarter, " is loaded."))
NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
four_quarters = paste("Q", 1:4, sep = "")
for(year in 2009:2018){
for(quarter in four_quarters){
i = length(lst_fnames) + 1
fname = load_file_get_fname(year, quarter)
if(length(fname)!=0){
lst_fnames[i] = fname
}
}
}
write(lst_fnames, "data/lst_fnames.txt")
library(quantmod)
library(dplyr)
library(lubridate)
library(tidyr)
library(stringr)
library(ggplot2)
start <- as.Date('2014-01-01')
end   <- as.Date('2019-02-21')
getSymbols(c('AAPL', 'AMZN', 'FB', 'GOOG', 'MSFT', 'NFLX'),
from = start, to = end, return.class = 'data.frame')
stocks <- bind_cols(AAPL, AMZN, FB, GOOG, MSFT, NFLX) %>%
mutate(date = as.Date(rownames(AAPL)))
rm(AAPL, AMZN, FB, GOOG, MSFT, NFLX)
stocks %>%
gather(key = 'key', value = 'value', -date) %>%
separate(key, into = c("stock", "type")) %>%
spread(key = type, value = value) -> stocksTidy
# Let's just focus on the closing value of the stocks. Using ggplot2, we can plot the closing values over time:
stocksTidy %>%
group_by(stock) %>%
ggplot(aes(x = date, y = Close, color = stock)) +
geom_line() +
scale_x_date(date_breaks = "3 months") +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
stocksTidy2 %>%
group_by(stock) %>%
mutate(Close_norm = Close/first(Close)) %>%
ggplot(aes(x = date, y = Close_norm, color = stock)) +
geom_line() +
scale_x_date(date_breaks = "3 months") +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
stocks
View(stocks)
View(stocksTidy2)
View(stocksTidy)
runApp('lecture_8_shiny3/shiny_leaflet_practice.R')
runApp('lecture_8_shiny3/dashboard')
leaflet_andrew <- leaflet() %>%
addProviderTiles("CartoDB.DarkMatter")
library(leaflet)
leaflet_andrew <- leaflet() %>%
addProviderTiles("CartoDB.DarkMatter")
leaflet_a
leaflet_andrew
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
raw.df <- readr::read_csv("./data.csv")
raw.df
raw.df <- readr::read_csv("./data.csv")
View(raw.df)
columns(raw.df)
colnames(raw.df)
tolower(colnames(raw.df))
colnames(raw.df) <- tolower(colnames(raw.df))
View(raw.df)
View(raw.df)
names(raw.df)
raw.df %>%
rename(cusine = cuisine description)
library(dplyr)
library(plyr)
raw.df %>%
rename(cusine = cuisine description)
raw.df %>%
rename(cuisine = cuisine description)
# [1] "State"                      "Abbreviation"               "Capital"                    "Area (sq.km)"
# [5] "Population (2010)"          "Density (2010)"             "GDP (% total) (2008)"       "GDP per capita (R$) (2008)"
# [9] "Literacy (2008)
brazil <- fread("./datasets/brazil_state_data.csv", header=TRUE) # brazil data
# [1] "order_id"                      "customer_id"                   "order_status"
# [4] "order_purchase_timestamp"      "order_approved_at"             "order_delivered_carrier_date"
# [7] "order_delivered_customer_date" "order_estimated_delivery_date"
po_delivery <- fread("./datasets/olist_orders_dataset.csv", header=TRUE)
# [1] "order_id"            "order_item_id"       "product_id"          "seller_id"           "shipping_limit_date"
# [6] "price"               "freight_value"
po_items <- fread("./datasets/olist_order_items_dataset.csv", header=TRUE)
# [1] "review_id"               "order_id"                "review_score"            "review_comment_title"
# [5] "review_comment_message"  "review_creation_date"    "review_answer_timestamp"
reviews <- fread("./datasets/olist_order_reviews_dataset.csv", header=TRUE)
# [1] "customer_id"              "customer_unique_id"       "customer_zip_code_prefix" "customer_city"
# [5] "customer_state"
customers <- fread("./datasets/olist_customers_dataset.csv", header=TRUE)
# [1] "geolocation_zip_code_prefix" "geolocation_lat"             "geolocation_lng"
# [4] "geolocation_city"            "geolocation_state"
geo <- fread("./datasets/olist_geolocation_dataset.csv", header=TRUE)
# [1] "order_id"             "payment_sequential"   "payment_type"         "payment_installments" "payment_value"
payment <- fread("./datasets/olist_order_payments_dataset.csv", header=TRUE)
# [1] "seller_id"              "seller_zip_code_prefix" "seller_city"            "seller_state"
seller <- fread("./datasets/olist_sellers_dataset.csv", header=TRUE)
# [1] "product_id"                 "product_category_name"      "product_name_lenght"        "product_description_lenght"
# [5] "product_photos_qty"         "product_weight_g"           "product_length_cm"          "product_height_cm"
# [9] "product_width_cm"
product <- fread("./datasets/olist_products_dataset.csv", header=TRUE)
# english_translation
category_eng <- fread("./datasets/product_category_name_translation.csv", header=TRUE)
category_eng
#Fixing categorynames columns. font broke due to spanish?
names(category_eng) <- c('product_category_name','product_category_name_english')
# append the translated column
join(product, category_eng,
type = "left", by = 'product_category_name') -> product
# get volume of each products in meters
product %>%
dplyr::mutate(product_volume_m = product_length_cm*product_height_cm*product_width_cm/100) -> product
# get total cost by summing shipping_cost and product_cost
po_items %>%
mutate(invoice = price + freight_value) -> po_items
po_items %>%
join(product, type='left') %>%
join(po_delivery, type='left') %>%
join(reviews, type='left') %>%
join(customers, type='left') %>%
join(payment, type='left') %>%
join(seller, type='left') %>%
select(customer_id,
order_id,
order_item_id,
order_status,
order_purchase_timestamp,
order_approved_at,
order_delivered_carrier_date,
shipping_limit_date,
order_delivered_customer_date,
order_estimated_delivery_date,
product_id,
product_category_name_english,
product_weight_g,
product_volume_m,
price,
freight_value,
invoice,
review_score,
payment_type,
customer_zip_code_prefix,
customer_city,
customer_state,
seller_id,
seller_zip_code_prefix,
seller_city,
seller_state) %>%
rename(
PO_date = order_purchase_timestamp, # purchase_order
SO_date = order_approved_at, #sales_order
DO_date = shipping_limit_date, #deliver_order
GI_date = order_delivered_carrier_date, #goods_issue
GR_date = order_delivered_customer_date, #goods_receipt
c_RDD = order_estimated_delivery_date, #customer_RequiredDeliveryDate
c_zip = customer_zip_code_prefix,
c_city = customer_city,
c_state = customer_state,
product_category = product_category_name_english,
s_zip = seller_zip_code_prefix,
s_city = seller_city,
s_state = seller_state) %>%
mutate(
PO_date = lubridate::as_datetime(PO_date),
SO_date = lubridate::as_datetime(SO_date),
DO_date = lubridate::as_datetime(DO_date),
GI_date = lubridate::as_datetime(GI_date),
GR_date = lubridate::as_datetime(GR_date),
c_RDD = lubridate::as_datetime(c_RDD)) %>%
mutate(
PO_date = lubridate::date(PO_date),
SO_date = lubridate::date(SO_date),
GI_date = lubridate::date(GI_date),
DO_date = lubridate::date(DO_date),
GR_date = lubridate::date(GR_date),
c_RDD = lubridate::date(c_RDD)) -> po_master
# clean Geo Data
geo %>%
select(geolocation_zip_code_prefix,
geolocation_lat,
geolocation_lng) %>%
group_by(geolocation_zip_code_prefix) %>%
summarise(lat = mean(geolocation_lat),
lng = mean(geolocation_lng)) %>%
ungroup()-> cgeo
# attach lat,lng to po_master
po_master %>%
left_join(cgeo, by = c("c_zip" = "geolocation_zip_code_prefix")) %>%
left_join(cgeo, by = c("s_zip" = "geolocation_zip_code_prefix")) %>%
rename(c_lat = lat.x,
c_lng = lng.x,
s_lat = lat.y,
s_lng = lng.y) -> po_master
# LT data
po_master = po_master %>%
mutate(POtoSO = SO_date - PO_date, # duration of purchase_order to sales_order due to fraudcheck (fraud check)
SOtoDO = DO_date - SO_date, # duration of expected seller's shipping date to carrier since the purchase (can be long due to inventory/transportation)
SOtoGI = GI_date - SO_date, # duration of actual seller's shipping date to carrier since the purchase  (actual when order is confirmed)
GItoGR = GR_date - GI_date, # duration of expected shipping date to customer receive (how long carrier took)
GItoGR = GR_date - GI_date, # duration of actual shipping to customer receive (carrier to customer)
POtoRDD = c_RDD - PO_date,  # duration of expected order purchase to customer receive (expected LeadTime for delivery)
POtoGR = GR_date - PO_date, # duration of actual order purchase to customer receive (Actual LT for delivery)
GRvRDD = c_RDD - GR_date,   # comparison of actual delievered date vs expected delivery date (how much faster was LT)
DOvGI = DO_date - GI_date)  #comparison of actual delivered date vs expected delivery date to carrier (how much seller confirmed)
# update state data
View(po_master)
po_master %>%
left_join(brazil, by = c("c_state" = "Abbreviation")) %>%
left_join(brazil, by = c("s_state" = "Abbreviation")) %>%
mutate(c_state = State.x,
s_state = State.y) %>%
subset(select=-c(State.x,State.y))->po_master
# Cleaning po_master AGAIN
po_master %>%
mutate(
GR_week = lubridate::as_datetime(PO_date))
po_master %>%
filter(GR_date<ymd('2018/08/29')) %>%
mutate(delivered_week = lubridate::week(ymd(GR_date)),
delivered_year = lubridate::year(ymd(GR_date))) ->po_master
po_master %>%
mutate(backorder = ifelse(GRvRDD<0,1,0),
delivered_year = as.factor(delivered_year),
purchase_week = lubridate::week(ymd(PO_date)),
purchase_year = lubridate::year(ymd(PO_date)),
purchase_year=as.factor(purchase_year)) -> po_master
library(data.table)
library(leaflet)
library(sp)
library(tmap)
library(spData)
library(tidyr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(ggmap)
library(corrplot)
library(ggpubr)
setwd('C:/Users/Young Min Cho/Desktop/Bootcamp/Project/shiny_ecom/')
# [1] "State"                      "Abbreviation"               "Capital"                    "Area (sq.km)"
# [5] "Population (2010)"          "Density (2010)"             "GDP (% total) (2008)"       "GDP per capita (R$) (2008)"
# [9] "Literacy (2008)
brazil <- fread("./datasets/brazil_state_data.csv", header=TRUE) # brazil data
# [1] "order_id"                      "customer_id"                   "order_status"
# [4] "order_purchase_timestamp"      "order_approved_at"             "order_delivered_carrier_date"
# [7] "order_delivered_customer_date" "order_estimated_delivery_date"
po_delivery <- fread("./datasets/olist_orders_dataset.csv", header=TRUE)
# [1] "order_id"            "order_item_id"       "product_id"          "seller_id"           "shipping_limit_date"
# [6] "price"               "freight_value"
po_items <- fread("./datasets/olist_order_items_dataset.csv", header=TRUE)
# [1] "review_id"               "order_id"                "review_score"            "review_comment_title"
# [5] "review_comment_message"  "review_creation_date"    "review_answer_timestamp"
reviews <- fread("./datasets/olist_order_reviews_dataset.csv", header=TRUE)
# [1] "customer_id"              "customer_unique_id"       "customer_zip_code_prefix" "customer_city"
# [5] "customer_state"
customers <- fread("./datasets/olist_customers_dataset.csv", header=TRUE)
# [1] "geolocation_zip_code_prefix" "geolocation_lat"             "geolocation_lng"
# [4] "geolocation_city"            "geolocation_state"
geo <- fread("./datasets/olist_geolocation_dataset.csv", header=TRUE)
# [1] "order_id"             "payment_sequential"   "payment_type"         "payment_installments" "payment_value"
payment <- fread("./datasets/olist_order_payments_dataset.csv", header=TRUE)
# [1] "seller_id"              "seller_zip_code_prefix" "seller_city"            "seller_state"
seller <- fread("./datasets/olist_sellers_dataset.csv", header=TRUE)
# [1] "product_id"                 "product_category_name"      "product_name_lenght"        "product_description_lenght"
# [5] "product_photos_qty"         "product_weight_g"           "product_length_cm"          "product_height_cm"
# [9] "product_width_cm"
product <- fread("./datasets/olist_products_dataset.csv", header=TRUE)
# english_translation
category_eng <- fread("./datasets/product_category_name_translation.csv", header=TRUE)
category_eng
#Fixing categorynames columns. font broke due to spanish?
names(category_eng) <- c('product_category_name','product_category_name_english')
# append the translated column
join(product, category_eng,
type = "left", by = 'product_category_name') -> product
# get volume of each products in meters
product %>%
dplyr::mutate(product_volume_m = product_length_cm*product_height_cm*product_width_cm/100) -> product
# get total cost by summing shipping_cost and product_cost
po_items %>%
mutate(invoice = price + freight_value) -> po_items
po_items %>%
join(product, type='left') %>%
join(po_delivery, type='left') %>%
join(reviews, type='left') %>%
join(customers, type='left') %>%
join(payment, type='left') %>%
join(seller, type='left') %>%
select(customer_id,
order_id,
order_item_id,
order_status,
order_purchase_timestamp,
order_approved_at,
order_delivered_carrier_date,
shipping_limit_date,
order_delivered_customer_date,
order_estimated_delivery_date,
product_id,
product_category_name_english,
product_weight_g,
product_volume_m,
price,
freight_value,
invoice,
review_score,
payment_type,
customer_zip_code_prefix,
customer_city,
customer_state,
seller_id,
seller_zip_code_prefix,
seller_city,
seller_state) %>%
rename(
PO_date = order_purchase_timestamp, # purchase_order
SO_date = order_approved_at, #sales_order
DO_date = shipping_limit_date, #deliver_order
GI_date = order_delivered_carrier_date, #goods_issue
GR_date = order_delivered_customer_date, #goods_receipt
c_RDD = order_estimated_delivery_date, #customer_RequiredDeliveryDate
c_zip = customer_zip_code_prefix,
c_city = customer_city,
c_state = customer_state,
product_category = product_category_name_english,
s_zip = seller_zip_code_prefix,
s_city = seller_city,
s_state = seller_state) %>%
mutate(
PO_date = lubridate::as_datetime(PO_date),
SO_date = lubridate::as_datetime(SO_date),
DO_date = lubridate::as_datetime(DO_date),
GI_date = lubridate::as_datetime(GI_date),
GR_date = lubridate::as_datetime(GR_date),
c_RDD = lubridate::as_datetime(c_RDD)) %>%
mutate(
PO_date = lubridate::date(PO_date),
SO_date = lubridate::date(SO_date),
GI_date = lubridate::date(GI_date),
DO_date = lubridate::date(DO_date),
GR_date = lubridate::date(GR_date),
c_RDD = lubridate::date(c_RDD)) -> po_master
# clean Geo Data
geo %>%
select(geolocation_zip_code_prefix,
geolocation_lat,
geolocation_lng) %>%
group_by(geolocation_zip_code_prefix) %>%
summarise(lat = mean(geolocation_lat),
lng = mean(geolocation_lng)) %>%
ungroup()-> cgeo
# attach lat,lng to po_master
po_master %>%
left_join(cgeo, by = c("c_zip" = "geolocation_zip_code_prefix")) %>%
left_join(cgeo, by = c("s_zip" = "geolocation_zip_code_prefix")) %>%
rename(c_lat = lat.x,
c_lng = lng.x,
s_lat = lat.y,
s_lng = lng.y) -> po_master
# LT data
po_master = po_master %>%
mutate(POtoSO = SO_date - PO_date, # duration of purchase_order to sales_order due to fraudcheck (fraud check)
SOtoDO = DO_date - SO_date, # duration of expected seller's shipping date to carrier since the purchase (can be long due to inventory/transportation)
SOtoGI = GI_date - SO_date, # duration of actual seller's shipping date to carrier since the purchase  (actual when order is confirmed)
GItoGR = GR_date - GI_date, # duration of expected shipping date to customer receive (how long carrier took)
GItoGR = GR_date - GI_date, # duration of actual shipping to customer receive (carrier to customer)
POtoRDD = c_RDD - PO_date,  # duration of expected order purchase to customer receive (expected LeadTime for delivery)
POtoGR = GR_date - PO_date, # duration of actual order purchase to customer receive (Actual LT for delivery)
GRvRDD = c_RDD - GR_date,   # comparison of actual delievered date vs expected delivery date (how much faster was LT)
DOvGI = DO_date - GI_date)  #comparison of actual delivered date vs expected delivery date to carrier (how much seller confirmed)
# update state data
View(po_master)
po_master %>%
left_join(brazil, by = c("c_state" = "Abbreviation")) %>%
left_join(brazil, by = c("s_state" = "Abbreviation")) %>%
mutate(c_state = State.x,
s_state = State.y) %>%
subset(select=-c(State.x,State.y))->po_master
# Cleaning po_master AGAIN
po_master %>%
mutate(
GR_week = lubridate::as_datetime(PO_date))
po_master %>%
filter(GR_date<ymd('2018/08/29')) %>%
mutate(delivered_week = lubridate::week(ymd(GR_date)),
delivered_year = lubridate::year(ymd(GR_date))) ->po_master
po_master %>%
mutate(backorder = ifelse(GRvRDD<0,1,0),
delivered_year = as.factor(delivered_year),
purchase_week = lubridate::week(ymd(PO_date)),
purchase_year = lubridate::year(ymd(PO_date)),
purchase_year=as.factor(purchase_year)) -> po_master
shiny::runApp()
po_master %>%
select('delivered_week','delivered_year','POtoSO','SOtoGI','GItoGR','c_state') %>%
gather('POtoSO','SOtoGI','GItoGR',key='LT',value=days )%>%
na.omit()  -> LT2
LT2
LT2 %>%
distinct(LT)
View(po_master)
ggplot(PCperState, aes(product_category,a,group=product_category))+
geom_bar(stat="identity",aes(reorder(product_category, -a, sum),fill=a))+
scale_fill_gradient(low="#56B1F7", high='black')+
labs(title="Average SO-GI per Category",
x = 'State',
y = 'Day') +
theme_bw()+
theme(legend.position = "none",axis.text.x = element_text(angle=45, vjust=0.6), plot.title = element_text(hjust = 0.5))
runApp()
